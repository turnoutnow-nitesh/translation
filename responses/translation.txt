"नमस्कार और हमारी अतिरिक्त वेस्ट समिट ऑनलाइन श्रृंखला के हिस्से के रूप में आधुनिक अनुप्रयोगों के लिए सही डेटाबेस चुनने के लिए आपका स्वागत है। मेरा नाम विलियम वोंग है और मैं एक विशेषज्ञ डेटाबेस समाधान आर्किटेक्ट हूं। और आज मैं माइकल रिकार्डी से जुड़ूंगा, जो हमारे विशेषज्ञ विकास समाधान वास्तुकार हैं। टुडे। हम आपको यह दिखाने के लिए यहां आने के लिए वास्तव में उत्साहित हैं कि हमारे एजेंडे के लिए आपके अनुप्रयोगों के पैमाने के प्रदर्शन और उपलब्धता को बेहतर बनाने के लिए उद्देश्य से निर्मित डेटाबेस का उपयोग कैसे किया जा सकता है, इसमें आधुनिक दिन के अनुप्रयोगों की आवश्यकताओं का परिचय होगा। फिर माइक्रोसर्विसेज और उद्देश्य निर्मित डेटाबेस का उपयोग करके हल की जाने वाली चुनौतियों को देखेंगे यह देखने से पहले कि हम आपके विशेष वर्कलोड के लिए सही डेटाबेस कैसे चुन सकते हैं। माइकल। फिर हम थोड़ा गहराई से गोता लगाएंगे, जहां वह एक मोनोलिथिक रिलेशनल डेटाबेस स्टैक से एक ऐप का आधुनिकीकरण करेगा, जो कि उद्देश्य से निर्मित डेटाबेस का उपयोग करेगा और आपको प्रदर्शन और पैमाने दोनों में अंतर दिखाएगा। तो चलिए शुरू करते हैं और हमारे आधुनिक ऐप्स की आवश्यकताओं को देखते हैं। और हम सबसे पहले उन ऐप्स को देखते हैं जिन्हें हम हर दिन इस्तेमाल करते हैं जैसे कि हमारी राइड शेयरिंग, मीडिया, स्ट्रीमिंग, बैंकिंग, गेमिंग और सोशल मीडिया। हम कुछ सामान्य पैटर्न देखना शुरू करते हैं। ये पैटर्न विभिन्न भौगोलिक क्षेत्रों में हमारे ऐप्स को एक्सेस करने वाले लाखों उपयोगकर्ता हो सकते हैं। और ये वही उपयोगकर्ता तत्काल अनुभवों की अपेक्षा कर रहे हैं जो लगातार मिलीसेकंड या यहां तक कि उप मिलीसेकंड प्रतिक्रिया समय तक उबाल सकते हैं। हमारे ऐप्स को हमारी फ्लैश बिक्री या मूत्र प्रसंस्करण जैसी घटनाओं की मांगों को पूरा करने और फिर वापस स्केल करने के लिए हाइपर स्केल करने की आवश्यकता होगी। हम उपयोग में नहीं हैं ताकि हम लागतों को कम कर सकें। यह अनुमान है कि यह पिछले 30 वर्षों की तुलना में अगले तीन वर्षों में अधिक डेटा कैप्चर करेगा। और इसके लिए पेटाबाइट्स को संसाधित करने के लिए विशेष उपकरणों की आवश्यकता होगी। यदि शून्य बाइट्स नहीं हैं, तो स्ट्रक्चर्ड और अनस्ट्रक्चर्ड डेटा के लायक हैं। अगर हम अभी कुछ समय लेते हैं और इनमें से अधिकांश क्लाउड बेस ऐप्स के आर्किटेक्चरल पैटर्न के बारे में सोचते हैं, तो आप पाएंगे कि वे सभी माइक्रोसर्विसेज हैं। इसका मतलब है कि वे एक पीआईएस के माध्यम से अत्यधिक वितरित, शिथिल रूप से युग्मित और एक्सेस किए जाते हैं तो आर्किटेक्चर में बदलाव का मतलब हमारे अंतर्निहित डेटाबेस के लिए क्या है क्योंकि हमारे ऐप्स अब सेवाओं में डिकॉप्ल हो गए हैं। यह इन सेवाओं में से प्रत्येक का अपना स्वतंत्र डेटाबेस रखने की अनुमति देता है। और इससे हमें बहुत सारे फायदे मिलेंगे, उदाहरण के लिए, हमें अपने अनुप्रयोगों को प्रत्येक सेवा और डेटाबेस कैनाल स्केल के रूप में स्वतंत्र रूप से हाइपर स्केल करने की क्षमता प्रदान करेगा। आइए ब्लैक फ्राइडे को एक उपयोग केस के रूप में लें। हमें अपनी सूची और भुगतान सेवा को कम समय सीमा में सैकड़ों हज़ारों समवर्ती अनुरोधों तक ले जाने की आवश्यकता हो सकती है, लेकिन हो सकता है कि हमारे उपयोगकर्ता पंजीकरण उसी डिग्री तक न बढ़ें। एक और लाभ अतिरिक्त चपलता है। चूंकि अब हम विभिन्न घटकों में तेजी से नवाचार कर सकते हैं। हम मोनोलिथ से संबंधित सभी जटिल युग्मित निर्भरताओं से निपटने के बिना मॉड्यूलर स्तर पर नए बिल्ड और सुविधाओं का त्वरित परीक्षण और रोल बैक कर सकते हैं। एक सामान्य व्यावसायिक चुनौती हमारे ऐप्स को और अधिक उपलब्ध कराना है और हमारे डेटाबेस को डिकॉप्ल करके, यह इसकी समग्र उपलब्धता को बढ़ाएगा क्योंकि अब हमारे पास एक मोनोलिथिक डेटाबेस नहीं है जो कोड परिनियोजन या अपग्रेड और पैच जैसे हमारे कार्यक्रमों के लिए विवाद के एकल बिंदु के रूप में कार्य करता है। इसलिए अब जब हम अपने डेटा को डिकॉप्ल करने के फायदों को समझते हैं। T हम अपने माइक्रोसर्विसेज के लिए उद्देश्य से निर्मित डेटाबेस पर विचार क्यों करेंगे? हमारे डेवलपर्स चाहते हैं कि सही डेटाबेस हमारे आधुनिक अनुप्रयोगों की ज़रूरतों को पूरा करे जैसा कि हमने पहले बताया था। और स्पष्ट रूप से यह कि एक आकार हर चीज के लिए एक रिलेशनल डेटाबेस का उपयोग करने के सभी तरीकों को फिट करता है, बस अब काम नहीं करता है। उदाहरण के लिए, हमें माइक्रोसेकंड लेटेंसी प्रतिक्रिया समय प्रदान करने के लिए डेटाबेस की आवश्यकता हो सकती है ताकि हम अपनी वेबसाइटों को तुरंत रेंडर कर सकें या सर्जन उपयोगकर्ता की मांगों को पूरा करने के लिए लगातार प्रतिक्रिया समय दे सकें। और इन विशेष उपयोग के मामलों के लिए रिलेशनल आर्किटेक्चर सबसे उपयुक्त नहीं है। वास्तव में, सही डेटाबेस का उपयोग नहीं करने से आमतौर पर प्रदर्शन संबंधी समस्याएं, स्केलेबिलिटी की कमी, डेवलपर लचीलेपन की कमी और हमारी समग्र लागतों में वृद्धि होगी। इसलिए परंपरागत रूप से, जब मैं अपने ग्राहकों से बात करता हूं तो इन उद्देश्यों को अपनाने के लिए एक बाधा है, जिसमें संभावित परिचालन ओवरहेड्स होते हैं। और इसमें अपफ्रंट हार्डवेयर और सॉफ्टवेयर या विशेषज्ञता में निवेश शामिल थे ताकि उन्हें स्केलेबल, अत्यधिक उपलब्ध और प्रदर्शन करने योग्य बनाया जा सके। और यहीं से एडब्ल्यूएस आता है। हम 15 से अधिक उद्देश्य से निर्मित डेटाबेस के सबसे व्यापक और सबसे गहरे पोर्टफोलियो की पेशकश करेंगे, जो विभिन्न डेटा मॉडल का लाभ उठा सकते हैं, उद्देश्य से निर्मित और पूरी तरह से प्रबंधित डेटाबेस जो हमने ग्राउंड अप से बनाए हैं ग्राहक अब समय और लागत बचा सकते हैं, बड़े पैमाने पर प्रदर्शन में सुधार कर सकते हैं और तेजी से नया कर सकते हैं। हमारे पास मेमोरी में रिलेशनल की-वैल्यू डॉक्यूमेंट, वाइड कॉलम टाइम सीरीज़ लेज़र और हमारे ग्राफ़ डेटाबेस जैसे हर उपयोग केस से मेल खाने के लिए डेटाबेस का उद्देश्य है। तो अब जब हम उद्देश्य से निर्मित डेटाबेस की आवश्यकता को समझते हैं, तो आप अपने विशेष उपयोग के मामलों के लिए सही डेटाबेस का चयन कैसे करेंगे? मैं लोगों को बताना चाहता हूं कि 100 अलग-अलग डेटाबेस की सूची देखने के बजाय, हम सामान्य डेटाबेस श्रेणियों के बारे में सोचकर क्यों शुरू नहीं करते? इसलिए अब हम जल्दी से श्रेणियों को देखते हैं। न केवल आपको उस परिचित रिलेशनल डेटाबेस को बाईं ओर मिलेगा, बल्कि आपको हमारे अमेज़ॅन दस्तावेज़ डीबी जैसे अन्य डेटाबेस, डेटाबेस भी दिखाई देंगे, जो जेसन प्रारूप में डेटा संग्रहीत करने के लिए अनुकूलित है। और चूंकि यह कोई सीक्वल डेटाबेस नहीं है, इसलिए यह हमें एप्लिकेशन स्कीमर्स को बदलने के लिए लचीलापन देगा, लेकिन यह हमें किसी भी विशेषता के आधार पर दस्तावेज़ों को क्वेरी करने की अनुमति भी देगा। और यह हमारे कंटेंट मैनेजमेंट या मोबाइल ऐप या अमेज़ॅन नेपच्यून जैसे ग्राफ़ डेटाबेस के लिए वास्तव में आसान है, जो तब हमें अत्यधिक कनेक्टेड डेटा सेट के साथ काम करने की अनुमति देता है। हम जटिल जोड़ों और नेस्टेड प्रश्नों के साथ एक रिलेशनल डेटाबेस में इसे मॉडल करने का प्रयास कर सकते हैं, लेकिन ग्राफ डेटाबेस में हमारे कई रिश्तों में वृद्धि के रूप में हमारी विलंबता बढ़ेगी। हालांकि, यह हमें कुछ ही सेकंड में लाखों रिश्तों को पार करने की अनुमति देता है, जो धोखाधड़ी का पता लगाने, सोशल मीडिया और हमारे सिफारिश इंजन के लिए बहुत अच्छा है। खैर अंत में हमारे अमेज़ॅन टाइम स्ट्रीम जैसे टाइम सीरीज़ डेटाबेस की तरह, जो एक दिन में खरबों समय अनुक्रम डेटा को निगलने के लिए अनुकूलित है और साथ ही हमें सहसंबंध और इंटरपोलेशन जैसे समय आधारित फ़ंक्शन प्रदान करता है ताकि हम उस डेटा से बेहतर जानकारी प्राप्त कर सकें। और यह हमारे IOT devops या ईवेंट ट्रैकिंग ऐप्स के लिए बहुत अच्छा है। आइए अब कुछ समय निकालकर कुछ बहुत ही सामान्य श्रेणियों में डुबकी लगाते हैं, जिन्हें मैंने अपने ग्राहकों के बीच देखा है। आइए वास्तव में परिचित रिलेशनल डेटा मॉडल के साथ शुरू करें, रिलेशनल डेटा अत्यधिक संरचित है और डेटा को तालिकाओं में विभाजित किया गया है और सिस्टम द्वारा लागू किए गए संबंध प्राथमिक और संदर्भित कुंजी हैं और उनके लिए अच्छे उपयोग के मामले कार्यभार होंगे जहां हम अपने सभी एक्सेस पैटर्न को पूर्वनिर्धारित नहीं कर सकते सामने या अगर हमारे पास ऐसे ऐप्स थे जिनके लिए उच्च संदर्भित अखंडता और मजबूत स्थिरता की आवश्यकता होती है। हमारी ऑनलाइन भुगतान प्रणालियों की तरह। एक क्लाउड नेटिव डेटाबेस जिसे हम अपने रिलेशनल मॉडल के लिए चुन सकते हैं, वह है अमेज़न अरोड़ा। अरोड़ा मेरे सीक्वल और पोस्टग्रेज़ दोनों के साथ संगत है और मानक की तुलना में पांच गुना अधिक थ्रूपुट प्रदान करके हमारे प्रदर्शन को बढ़ाने में हमारी मदद कर सकता है। मेरा सीक्वल और स्टैंडर्ड पोस्टग्रेज़ की तुलना में तीन गुना ज्यादा। यह हमें कंप्यूट और स्टोरेज दोनों संसाधनों को स्वचालित रूप से स्केल करने में मदद करेगा और हमने बिली को तीन उपलब्धता क्षेत्रों में छह तरीके से स्टोर करने में मदद की है। और चूंकि यह एक प्रबंधित सेवा है, इसलिए तैनाती और नियमित पैचिंग और अपग्रेड, बैकअप जैसे कार्यों के लिए स्वचालन प्रदान करेगी और हमें ट्रांजिट और बाकी में एन्क्रिप्शन जैसी सुरक्षा सुविधाएं प्रदान करेगी। एक और बेहतरीन श्रेणी। हमारे मुख्य मूल्य डेटाबेस को देखने के लिए। मुख्य मूल्य डेटा वह है जो डेटा को संग्रहीत करने और पुनर्प्राप्त करने के लिए उस सरल कुंजी मान विधि का उपयोग करता है और इसकी ताकत इसके डिज़ाइन के पीछे अत्यधिक विभाजन या शार्ड डेटा तक होती है और फिर उस विभाजन कुंजी के आधार पर इसे भौतिक रूप से संग्रहीत करती है। यह डिज़ाइन इसे क्षैतिज रूप से लगभग किसी भी आकार में स्केल करने की अनुमति देता है, जबकि फिर भी हमें लगातार प्रतिक्रिया समय देता है, चाहे वह किसी भी पैमाने पर क्यों न हो। तो चलिए एक ऑनलाइन गेम के लिए एक उपयोग केस से गुजरते हैं, जिसमें उपयोगकर्ता के सत्र डेटा को संग्रहीत करने की आवश्यकता होती है और उस डेटा सेट को पुनर्प्राप्त करने के लिए गेमर टैग के माध्यम से एक परिभाषित एक्सेस पैटर्न होता है। चूंकि यह एक ऑनलाइन गेम है, इसलिए हम गेमर के लिए एक सुसंगत अनुभव सुनिश्चित करना चाहते हैं, भले ही 10 या 100,000 उपयोगकर्ता हों। यदि गेम इस विशेष उपयोग केस में बंद हो जाता है, तो हम एप्लिकेशन के विकास के बावजूद, लगातार प्रतिक्रिया समय प्राप्त करने के लिए एक प्रमुख मूल्य डेटाबेस का उपयोग करेंगे। एक उद्देश्य से निर्मित डेटाबेस जिसे हम अपने प्रमुख मूल्य डेटाबेस के लिए चुन सकते हैं, वह है amazon dynamodb। यह पूरी तरह से प्रबंधित और सर्वर रहित है, जिसका अर्थ है कि यह सभी प्रोविजनिंग सॉफ़्टवेयर का ध्यान रखेगा, सुरक्षा को पैचिंग करेगा और डायनामोडीबी को स्वचालित रूप से स्केल करने में हमारी मदद करने के लिए हमें ऐसे ऐप्स बनाने में सक्षम बनाता है जो बड़े पैमाने पर एकल अंक के मिलीसेकंड प्रतिक्रिया समय के लिए प्रदान कर सकते हैं और हमारे मिशन के लिए महत्वपूर्ण ऐप्स हम वैश्विक का उपयोग कर सकते हैं कई क्षेत्रों में हमारे डेटा सेट को दोहराने के लिए प्रतिकृति। मेरे ग्राहकों के बीच वास्तव में लोकप्रिय श्रेणी मेमोरी डेटाबेस में है मेमोरी डेटाबेस में इसके बजाय मेमोरी में हमारे डेटा को स्टोर किया जाएगा, जो तब हमें उप मिलीसेकंड प्रतिक्रिया समय देता है। और यह ऑनलाइन गेम या प्रशिक्षण मशीन लर्निंग मॉडल के लिए लीडरबोर्ड बनाए रखने पर उपयोगकर्ता सत्र डेटा को संग्रहीत करने के लिए उपयोग के मामलों के लिए बहुत अच्छा है। लेकिन सबसे आम उपयोग का मामला जो मैंने अपने ग्राहकों के बीच देखा है, उसे हमारे रिलेशनल डेटाबेस के सामने नकदी के रूप में यहां रखा गया है। यह हमें अपने अंतिम उपयोगकर्ताओं के लिए बेहतर प्रतिक्रिया समय देगा और अंतर्निहित रिलेशनल डेटाबेस पर रीड स्केलिंग दबावों को कम करेगा, जिससे संसाधन विवाद और स्थिरता के मुद्दों को लॉक किया जा सकता है, जो मकायला आपको मेमोरी डेटाबेस में अपने बाद के प्रदर्शन में दिखाएगी। हमारे पास अमेजन इलास्टिक कैश का विकल्प है। यह पूरी तरह से प्रबंधित सेवा है जो हमें उप मिलीसेकंड प्रतिक्रिया समय और गैर-विघटनकारी स्केलिंग प्रदान करने की अनुमति देती है। यह मेम कैश के साथ संगत दोनों है। डीएम रीडस और लोग इसे मेम कैश के लिए इस्तेमाल कर रहे थे, आमतौर पर इसका इस्तेमाल अपने लेटेंसी सेंसिटिव ऐप्स के लिए सिंपल स्केलिंग केशन लेयर बनाने के लिए करेंगे, जबकि हमारे रेडिट यूज़र, वे इसका इस्तेमाल अपने गेमिंग रीयल टाइम एनालिटिक्स और रेजिस के साथ मशीन लर्निंग जैसे अधिक बहुमुखी उपयोग के मामलों के लिए करेंगे। हमारे पास अमेज़ॅन मेमोरी डे बे का विकल्प भी है जो टिकाऊपन के साथ पूरी तरह से प्रबंधित क्लस्टर है। मेमोरी डिबेट हमें ओपन सोर्स रेजिस के साथ पूर्ण संगतता के साथ अल्ट्राफास्ट प्रदर्शन प्रदान करता है, जो तब हमें इन सभी समृद्ध डेटा संरचनाओं का उपयोग करने की अनुमति देता है जैसे कि ऑनलाइन लीडरबोर्ड के लिए सॉर्ट किए गए सेट का लाभ उठाकर। उपलब्धता क्षेत्रों में एक वितरित लेनदेन लॉग। मेमोरी डीबी हमें डेटा हानि के जोखिम के बिना तेज़ डेटाबेस रिकवरी और रीस्टार्ट प्रदान करता है, जिसका अर्थ है कि अब हम इसे लगातार डेटा सेट के लिए अपने प्राथमिक डेटाबेस के रूप में उपयोग कर सकते हैं। तो अब जब हम डिकॉप्ल्ड डेटाबेस आर्किटेक्चर की आवश्यकता और लाभों को समझते हैं और कुछ उपयोग मामलों से गुजरे हैं जो विशेष उद्देश्य से निर्मित डेटाबेस हल करते हैं। मैं आपको माइकली से मिलवाना चाहता हूं, जिन्होंने माइकल पर प्रदर्शन के रूप में यह सब किया। शुक्रिया विलियम। इस डेमो में हम अद्भुत पालतू जानवरों को देखेंगे, अद्भुत पालतू जानवर एक काल्पनिक कंपनी है और इस परिदृश्य में, अद्भुत पालतू जानवर एक ऑनलाइन पालतू जानवर की दुकान है, अद्भुत पालतू जानवरों में एक ई-कॉमर्स स्टोर की सभी विशेषताएं हैं जहां आप कैटलॉग ब्राउज़ कर सकते हैं, टोकरी में आइटम जोड़ सकते हैं और वर्तमान में अद्भुत पालतू जानवरों की तकनीक देख सकते हैं स्टैक में एक विरासत मोनोलिथिक बैक एंड और एक मोनोलिथिक शामिल हैं। मेरा सीक्वल डेटाबेस। यह मोनोलिथिक एप्लिकेशन अद्भुत पालतू जानवरों की सभी विभिन्न विशेषताओं और कार्यक्षमता को शक्ति प्रदान करता है। बहुत बढ़िया पालतू जानवर अपनी विरासत के मोनोलिथ के साथ कई चुनौतियों का सामना कर रहे हैं। सबसे पहले, उन्होंने पाया है कि कुछ प्रश्न दर्दनाक रूप से धीमे होते हैं, खासकर उच्च भार के मामलों में। फिर, पीक ट्रैफ़िक के दौरान प्रत्येक क्वेरी धीमी और धीमी होने के परिणामस्वरूप, उपयोगकर्ता अनुरोध विफल हो रहे हैं और उपयोगकर्ता लेनदेन पूरा करने में असमर्थ हैं। अंत में, डेटाबेस संसाधनों और प्रभु से बाहर चला जाता है जिसके कारण डेटाबेस क्रैश हो सकता है और संपूर्ण एप्लिकेशन अनुपलब्ध हो सकता है। यदि आप मोनोलिथिक अनुप्रयोगों को स्केल करने की भी कोशिश कर रहे हैं। ये चुनौतियां आपको बहुत परिचित लग सकती हैं। तो अब मैं आपको दिखाऊंगा कि एक साधारण परीक्षण चलाकर विरासत अद्भुत पालतू जानवरों का अनुप्रयोग कैसा प्रदर्शन करता है। फिर मैं आपको दिखाऊंगा कि माइक्रोसर्विसेज और उद्देश्य से निर्मित डेटाबेस के साथ कितने अद्भुत पालतू जानवरों को डिकॉप्ल किया जा सकता है। सही नौकरी के लिए सही डेटाबेस कैसे चुनें और आपको विरासत मोनोलिथिक एप्लिकेशन और माइक्रोसर्विसेज एप्लिकेशन के बीच प्रदर्शन में अंतर दिखाएं। अंत में, मैं नए आर्किटेक्चर में उपयोग किए जाने वाले कुछ डिज़ाइन पैटर्न पर संक्षेप में बात करूंगा। मैं आपको अद्भुत पालतू जानवरों पर एक नमूना उपयोगकर्ता यात्रा दिखाकर शुरू करता हूं। जैसा कि आप यहां देख सकते हैं जब मैं अद्भुत पालतू जानवरों से मिलने जाता हूं। मुझे पालतू जानवरों की सूची के साथ प्रस्तुत किया गया है। कैटलॉग में प्रत्येक प्रकार के कमेंट्री और खाते में उपलब्ध पालतू जानवरों के प्रकारों को दिखाया गया है। मैं ऐड टू कार्ट बटन पर क्लिक करके कार्ट में पालतू जानवरों को जोड़ सकता हूं और एक बार जब मैंने सभी पालतू जानवरों को जोड़ा, तो मैं कार्ड पर एक नज़र डाल सकता हूं और चेकआउट के लिए आगे बढ़ सकता हूं। चेकआउट पेज में। मैं लेन-देन पूरा करने और भुगतान की पुष्टि करने के लिए आवश्यक सभी विवरण दर्ज कर सकता हूं और एक बार पुष्टि संदेश प्रदर्शित होने के बाद, उपयोगकर्ता यात्रा पूरी हो जाती है। तो चलिए अब लोड टेस्ट चलाते हैं यह देखने के लिए कि लोड पर मोनोलिथिक एप्लिकेशन कैसा प्रदर्शन करता है। प्रदर्शन परीक्षण चलाने के लिए कई उपकरण उपलब्ध हैं जैसे कि j मीटर या आर्टिलरी। कुछ को नाम देने के लिए। लेकिन इस डेमो के लिए, मैं ब्लेज़ मीटर का उपयोग करने जा रहा हूं। यह परीक्षण अद्भुत पालतू जानवरों पर एक वास्तविक उपयोगकर्ता यात्रा का अनुकरण करता है, जहां प्रत्येक उपयोगकर्ता कार्ट में एक आइटम पर एक कैटलॉग प्राप्त करेगा और दूसरा सबमिट करेगा। यह परीक्षण 10 मिनट की अवधि के लिए यात्रा के माध्यम से नेविगेट करने वाले कुल 50 समवर्ती उपयोगकर्ताओं के साथ कॉन्फ़िगर किया गया है और एक मिनट की अवधि में उपयोगकर्ताओं की संख्या धीरे-धीरे बढ़ेगी। अंत में, यह परीक्षण ओडब्ल्यूएस ओरेगन क्षेत्र में चलेगा। अब मैं लोड टेस्ट शुरू करूंगा और जैसा कि परीक्षण पूरा होने में लगभग 10 मिनट लगते हैं, मैं वीडियो को गति दूंगा और परीक्षण पूरा होने के बाद हम परिणामों पर एक नज़र डालेंगे। तो परीक्षण अब पूरा हो गया है और हम इन स्क्रीन में परिणामों पर एक नज़र डाल सकते हैं, हमारे पास दो ग्राफ़ हैं। बाईं ओर वाला दिखाता है कि परीक्षण की अवधि में कितने अनुरोध सफल हुए और कितने अनुरोध विफल हुए। और दाईं ओर का ग्राफ परीक्षण की अवधि में औसत प्रतिक्रिया समय प्रदर्शित करता है। यदि हम दाईं ओर के ग्राफ़ पर ध्यान केंद्रित करते हैं, तो हम देख सकते हैं कि जैसे-जैसे यूज़र की संख्या बढ़ती है, एप्लिकेशन का औसत प्रतिक्रिया समय बढ़ता रहता है, जो लगभग सात सेकंड के चरम प्रतिक्रिया समय तक पहुँचता है। और कुछ बिंदु पर, प्रतिक्रिया समय केवल कुछ सैकड़ों मिलीसेकंड तक गिर गया और कुछ मिनटों के बाद, प्रतिक्रिया समय सात सेकंड तक वापस चला जाता है। यदि हम बाईं ओर के ग्राफ को देखते हैं, तो यह स्पष्ट है कि प्रतिक्रिया समय में लगभग 1750 की गिरावट क्यों है। हम देख सकते हैं कि इस समय लगभग सभी अनुरोध विफल हो जाते हैं और कोई सफल अनुरोध नहीं होते हैं। यह हमें बताता है कि उस दौरान वेबसाइट डाउन थी और उपयोगकर्ता का अनुरोध बहुत तेज़ी से विफल हो रहा था। तो चलिए थोड़ा गहराई से देखते हैं कि इन मुद्दों का क्या कारण है। मैं एडब्ल्यूएस एक्स रे का उपयोग कर रहा हूं जो एक्स रे सर्विस मैप से असफल अनुरोध में गहराई से गोता लगाने के लिए एक ट्रेसिंग सेवा है। मैं अपने मोनोलिथिक एप्लिकेशन और डेटाबेस में जाने वाले अनुरोधों को देख सकता हूं। यहां लाल रंग उन अनुरोधों की मात्रा को दर्शाता है जो डेटाबेस में विफल हो गए हैं। इसलिए अब मैं एक्स रे इनसाइट्स का उपयोग करने जा रहा हूं, एडब्ल्यूएस एक्स रे इनसाइट्स यह पहचानती है कि एप्लिकेशन में समस्याएं कहां हो रही हैं, प्रत्येक मुद्दे के रिकॉर्ड और संबंधित प्रभाव। और जब मैं एक अंतर्दृष्टि खोलता हूं तो मैं तुरंत देख सकता हूं कि समस्या का मूल कारण क्या है और इसका क्या प्रभाव है इस मामले में यह मुझे बता रहा है कि डेटाबेस में 23% अनुरोध विफल हो गया है। फिर मैं प्रत्येक व्यक्तिगत असफल अनुरोध पर ड्रिल करने के लिए अंतर्दृष्टि का विश्लेषण करने पर क्लिक कर सकता हूं। एक बार जब मैंने एक असफल अनुरोध खोला, तो मैं इस अनुरोध के लिए निष्पादित सभी घटकों को देख सकता हूं और साथ ही उनमें से प्रत्येक को कितना समय लगा। इस विशिष्ट मामले में डेटाबेस ने डेडलॉक के कारण 17 सेकंड के बाद एक त्रुटि लौटा दी। अंत में, आइए अधिक विवरण में समझने के लिए डेटा आधारित मैट्रिक्स पर एक नज़र डालें कि क्या हुआ। यदि हम CPU उपयोग पर ध्यान केंद्रित करते हैं, तो हम देख सकते हैं कि डेटाबेस CPU उपयोग बहुत तेज़ी से 100% तक बढ़ जाता है और कुछ मिनटों के निरंतर 100% CPU उपयोग के बाद, डेटाबेस IP उपयोग 0% पर वापस चला जाता है और फिर यह 100% तक वापस आता है। ऐसा इसलिए है क्योंकि उच्च CPU उपयोग के कारण डेटाबेस क्रैश हो जाता है और पुनरारंभ होता है। आप अन्य मेट्रिक्स जैसे राइट आई ऑप्स और डेटाबेस कनेक्शन को देखकर भी इसे सत्यापित कर सकते हैं। जैसा कि हमने देखा है कि यह विरासत एप्लिकेशन अच्छा प्रदर्शन नहीं करता है, ट्रैफ़िक चोटियों के दौरान अनुरोधों में 10 सेकंड तक का समय लग सकता है और डेटाबेस क्रैश के कारण बहुत बढ़िया पालतू जानवर मोनोलिथिक अनुप्रयोगों के लिए कई सामान्य ऑप्टिमाइज़ेशन को लागू करने पर विचार कर सकते हैं। हालांकि, वे अगले वर्ष की तुलना में 10 गुना बढ़ने की उम्मीद करते हैं और वे जानते हैं कि मोनोलिथिक अनुप्रयोगों के लिए सामान्य अनुकूलन के साथ भी, वे अपनी योजनाबद्ध वृद्धि का समर्थन नहीं कर पाएंगे। यही कारण है कि अद्भुत पालतू जानवरों ने उद्देश्य से निर्मित डेटाबेस के साथ माइक्रोसर्विसेज में जाने का फैसला किया। तो आइए यह समझने की कोशिश करें कि वे इस एप्लिकेशन को कैसे विघटित करते हैं, उन्होंने कैसे तय किया कि इस नए आर्किटेक्चर में प्रत्येक उपयोग के मामले के लिए किस डेटाबेस का उपयोग करना है, अद्भुत पालतू जानवरों को चार माइक्रोसर्विसेज, इन्वेंट्री ऑर्डर कार्ट और कैटलॉग में विभाजित किया गया है। माइक्रो सर्विस डायनामोडब का उपयोग करती है। इन्वेंट्री डेटा को एक सरल कुंजी मूल्य प्रारूप में संग्रहीत किया जा सकता है और एक अच्छी तरह से परिभाषित पैटर्न है जैसे कि सूची में पालतू जानवरों को जोड़ना या निकालना। फिर हमारे पास पुरानी प्रोसेसिंग है। इस उपयोग के मामले में डेटा स्थिरता की आवश्यकता होती है और डेटा को एक सामान्य रिलेशनल प्रारूप में संग्रहीत किया जाता है। पिछले कुछ तर्क का पुन: उपयोग भी किया जा सकता है और यही कारण है कि यह मेरे सीक्वल संगत अमेज़ॅन ऑरोरा के लिए बहुत उपयुक्त है। फिर हमारे पास कास्ट माइक्रोसर्विसेज हैं। कास्ट कार्यक्षमता अद्भुत पालतू जानवरों पर दूसरी सबसे अधिक इस्तेमाल की जाने वाली कार्यक्षमता है। इसमें पढ़ने और लिखने की उच्च मात्रा है और आवश्यक प्रतिक्रिया समय सात मिलीसेकंड में होना चाहिए जैसा कि आप विलियम्स सत्र से याद रख सकते हैं। यह मेमोरी डेटाबेस जैसे ब्रैडी ऑन इलास्टिक कैश के लिए एक बढ़िया उपयोग केस है। और अंत में हमारे पास कैटलॉग है, इस समय कैटलॉग, सभी उपलब्ध इन्वेंट्री से पूछताछ करता है और पालतू जानवरों के प्रकार के आधार पर खाता बनाता है क्योंकि अद्भुत पालतू जानवर एक रिलेशनल डेटाबेस का उपयोग करते हैं। वे वर्तमान में समृद्ध खोज कार्यक्षमता प्रदान करने में सक्षम नहीं हैं और इसलिए कैटलॉग के लिए वे जिन तकनीकों का उपयोग कर सकते हैं उनमें से एक है अमेज़न ओपन सर्च सेवा। खुली खोज आसानी से खोज कर सकती है और अरबों दस्तावेज़ों को एकत्र कर सकती है। तो अब जब हमने देखा है कि लक्ष्य आर्किटेक्चर कैसा दिखता है, तो चलिए एक और प्रदर्शन परीक्षण चलाते हैं, यह देखने के लिए कि नया आर्किटेक्चर कैसा प्रदर्शन करता है जैसा कि आप देख सकते हैं कि मैं यूआरएल में पैरामीटर जोड़ सकता हूं माइक्रोसर्विसेज बैक एंड का उपयोग शुरू करने के लिए और इन माइक्रोसर्विसेज बैक एंड में, मेरे पास लगभग समान संख्या में पालतू जानवर हैं अगर मोनोलिथिक एप्लिकेशन की तुलना में अधिक नहीं है और कार्यक्षमता बिल्कुल वैसी ही है। इसलिए मैं आगे बढ़ सकता हूं और अपने माइक्रोसर्विसेज बैक एंड के लिए टेस्ट खोल सकता हूं। जैसा कि आप देख सकते हैं, प्रदर्शन परीक्षण पिछले परीक्षण के समान कॉन्फ़िगरेशन के समान है और उपयोगकर्ता यात्रा समान है। हम कैटलॉग प्राप्त कर रहे हैं, एक कार्ड जोड़ रहे हैं और एक ऑर्डर सबमिट कर रहे हैं। और कॉन्फ़िगरेशन 50 कुल उपयोगकर्ताओं के साथ 10 मिनट की अवधि के लिए और एक मिनट के रैंप अप के साथ समान है। तो चलिए आगे बढ़ते हैं और इस नए परीक्षण को चलाते हैं और परिणामों पर एक नज़र डालते हैं। एक बार परीक्षण पूरा हो जाने के बाद। पहले की तरह मैं वीडियो के इस हिस्से को गति दूंगा जब तक कि परीक्षण पूरा नहीं हो जाता। आइए एक नज़र में इन परिणामों पर एक नज़र डालते हैं। हम पहले से ही देख सकते हैं कि प्रदर्शन बहुत अधिक सुसंगत है कि प्रदर्शन परीक्षण के दौरान कोई त्रुटि नहीं थी। और कुल मिलाकर औसत प्रतिक्रिया समय लगभग 160 मिलीसेकंड है, जो हमारे मोनोलिथिक एप्लिकेशन की तुलना में 45 गुना तेज है। तो आइए एक नजर डालते हैं एक्स रे पर और यहां हम माइक्रोसर्विसेज के बीच सभी इंटरैक्शन देख सकते हैं। उदाहरण के लिए, हम देख सकते हैं कि सबमिट की गई सभी कार्यक्षमताएं वास्तव में एक से अधिक माइक्रोसर्विसेज तक कैसे फैलती हैं। और यहां हम कैटलॉग प्राप्त करने और कार्ट में आइटम जोड़ने के लिए एपीआई कॉल देख सकते हैं। अब मैं यहां एक ही सबमिट ऑर्डर अनुरोध पर गहराई से गोता लगाने के लिए विशिष्ट निशान देख सकता हूं, हम यह देख सकते हैं कि सबमिट या ट्रांजेक्शन की अवधि के लिए समय कहाँ खर्च किया गया था। हम इसे लोड के तहत देख सकते हैं। इस ऑपरेशन में केवल 300 मिलीसेकंड का समय लगा, जो कि डेमो में समान शर्तों के तहत मोनोलिथिक एप्लिकेशन में कार्यक्षमता को सबमिट करने से 25 गुना तेज है, हमने देखा कि कैसे माइक्रोसर्विसेज आर्किटेक्चर ट्रैफिक से निपटने और लगातार प्रतिक्रिया समय प्रदान करने के लिए अच्छी तरह से स्केल करने में सक्षम है। इस नई वास्तुकला की एक और विशेषता यह है कि वे बहुत अधिक उपलब्धता प्राप्त कर सकते हैं। यदि डेटाबेस में से एक विफल हो जाता है, तो केवल एक माइक्रोसर्विसेज प्रभावित होता है और एप्लिकेशन आंशिक रूप से अभी भी माइक्रोसर्विसेज में स्थानांतरित करके कार्य कर सकता है। न केवल हम स्केल कर सकते हैं और बेहतर प्रदर्शन कर सकते हैं, बल्कि हमें अधिक उपलब्धता भी मिलती है। अंत में, मैं इस रचना में उपयोग किए गए डिज़ाइन पैटर्न का संक्षेप में उल्लेख करना चाहता हूं। इस नए आर्किटेक्चर में पहला इवेंट नोटिफिकेशन है। जब भी आइटम को इन्वेंट्री से जोड़ा या हटाया जाता है, तो कैटलॉग माइक्रो सेवा को अपडेट करने की आवश्यकता होती है। इस पैटर्न को लागू करने के लिए, हम डायनामोडब स्ट्रीम का लाभ उठाते हैं, जो डायनामोडीबी की एक विशेषता है जो आपको टेबल पर हर बदलाव को स्ट्रीम करने की अनुमति देती है। दूसरा पैटर्न सागा पैटर्न है। यह पैटर्न हमें कई माइक्रोसर्विसेज में व्यावसायिक लेनदेन निष्पादित करने की अनुमति देता है। इस उदाहरण में, AWS स्टेप फ़ंक्शंस का उपयोग करके चक्र पैटर्न लागू किया गया था और लेन-देन इन्वेंट्री, ऑर्डर और कैट माइक्रोसर्विसेज तक फैला हुआ है। यदि आप माइक्रोसर्विसेज पैटर्न के बारे में और जानना चाहते हैं। मैं इस सत्र में फॉल्ट टॉलरेंट पैटर्न का उपयोग करके बिल्ड ब्राज़ीलियन माइक्रोसर्विसेज नामक सत्र देखने की सलाह देता हूं, हमने देखा कि आज की आधुनिक एप्लिकेशन आवश्यकताएं क्या हैं। फिर हमने पता लगाया कि एक आकार से स्थानांतरित किए गए ग्राहक उद्देश्य से निर्मित डेटाबेस के लिए सभी दृष्टिकोण क्यों फिट होते हैं। हमने देखा कि आप सही नौकरी के लिए सही डेटाबेस कैसे चुन सकते हैं और हमने देखा कि यह कैसे बड़े पैमाने पर, बेहतर प्रदर्शन और अधिक उपलब्धता हासिल करने में आपकी मदद कर सकता है। हमने इस सत्र में कई अलग-अलग विषयों को शामिल किया है, लेकिन सीखने को यहां रुकना नहीं है। हम आपको हमारी प्रशिक्षण और प्रमाणन सामग्री की जांच करने के लिए प्रोत्साहित करते हैं। हम 500 से अधिक मुफ्त डिजिटल कोर्स प्रदान करते हैं जो आपको और आपकी टीम को नए क्लाउड कौशल बनाने और नवीनतम सेवाओं के बारे में जानने में मदद कर सकते हैं। और जब आप अपने कौशल का निर्माण करते हैं, तो हमारे 11 एडब्ल्यूएस प्रमाणपत्रों में से एक की तैयारी करने पर विचार करें। अधिक जानने के लिए आप इस स्लाइड में QR कोड स्कैन कर सकते हैं। इस वार्ता में भाग लेने के लिए धन्यवाद। AWS शिखर सम्मेलन के अनुभव को बेहतर बनाने में हमारी मदद करने के लिए हम आपकी प्रतिक्रिया सुनना पसंद करेंगे। इसलिए कृपया सत्र सर्वेक्षण पूरा करना याद रखें। शुक्रिया"